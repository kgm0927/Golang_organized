package chapter7

/*
		7.5 문맥 전환

	문맥 전환(context switching)이란 프로그램이 여러 프로세스 혹은 스레드에서 동작할 때
	기존에 하던 작업들을 메모리에 보관해두고 다른 작업을 시작하는 것을 의미한다. 문맥
	전환을 이용하여 프로그램이 병행적으로 수행될 수 있지만 이때 비용이 발생하게 된다. 하던
	일을 중단하고 보관해두어야 하기 때문에 CPU의 레지스터에 들어 있던 것들을 메모리에 보관하여야
	하고, CPU 파이프라인에서 다음 분서에 수행할 완료되지 못한 작접들이 버려지게 된다.

	성능을 위해서는 문맥 전환을 과도하게 하지 않는 것이 바람직하나 문맥전환을 전혀 하지 않으면
	동시에 수해오디는 것처럼 보이기보다는 몇몇 프로세스는 전혀 진행이 되지 않는 현상이 발생하게
	된다. 문맥 전환 비용도 있고 스레드마다 필요한 자원이 있기 때문에 무작정 스레드를 많이 만드는
	것은 좋지 않다.


	고루틴은 스레드보다 더 저렴하다. 고루틴을 여러 개 만든다고 해서 스레드가 그만큼 많이 만들어지는
	것은 아니다. 고루틴을 여럿 만들어도 스레드는 그것보다 훨씬 적게 만들어지고 여러 개의 고루틴들이
	하나의 스레드에 대응된다. Go 컴파일러가 어떤 고루틴들이 하니의 스레드에 묶이는 것이 좋은지를 알게
	되면 굳이 스레드의 문맥 전환을 하지 않도록 코드를 생생한다.


	Go 컴파일러는 주로 다음의 경우에 문맥 전환을 하는 코드를 생성할 수 있다.

	* 파일이나 네트워크 연산처럼 시간이 오래 걸리는 입출력 연산이 있을 때

	* 채널에 보내거나 받을 때

	* go로 고루틴이 생성될 때

	* 가비지 컬렉션 사이클이 지난 뒤



	Go의 입출력은 주로 블럭킹이다. 연산이 완료될 때까지 기다리는 것을 동기 입출력이라고도 한다. 이때 다른
	고루틴으로 문맥 전환하는 것은 매우 현명하다. 일상 생활로 표현하면 내가 할 일을 다른 사람에게 넘겨주고 돌려받을
	때까지 그 일은 진행이 되지 않으니 내 입장에서는 그 일이 멈춰 있을 것이다. 이때 다른 일로 전환하여 계속하면 된다.

	넌 블럭킹 입출력은 비동기 입출력이라고도 하는데, 입출력의 결과가 나올 때까지 기다리지 않는다. 대신 입출력이 끝나면
	어떤 일을 할지를 콜백으로 넘겨주는 패턴을 많이 사용한다. NodeJS 등지에서 많이 활용된다. Go 언어를 만든 살마들은 이런
	방식이 혼란스럽다로 생각하였기 때문에 동시성이 있는 고루틴들을 생성하고 이 고루틴에서 동기화 입출력을 하고 그때 문맥
	전환을 하는 방식을 이용하게 설계하였다.

	채널에 보내거나 받을 때, 고루틴 간의 문맥 전환이 일어나는 것을 자연스럽다. 채널에 자료를 보내는 쪽의 고루틴이 수행되다갸
	코내는 코드가 수행될 때, 같은 채널에서 데이터를 받는 다른 고루틴의 해당 부분으로 문맥 전환하면 자연스럽게 수행된다. 이것을
	컴파일 시간에 예측하면 변수들을 레지스터에 할당하는 전략을 더 잘 세울 수 있어서 성능 향상에 도움이 된다.


	고루틴을 새로 생성할 때에도 새로 생성도니 고루틴으로 건너뛸 수 있다. 그리고 가비지 컬렉션 사이클이 지난 뒤에 문맥 전환이 가능하다.

	문맥 전환을 강제로 시키기 위한 코드 중에 하나가 time.sleep(0)이다. 0초간 쉬는 아무 의미 없어보이는 코드라도 문맥 전환을 강제로
	동작하기 때문에 가끔 필요하다. 이것이 끝나지 않는 바쁜 연산만으로 반복하는 코드가 잇다면 다른 고루틴들은 처리될 기회를 잃어버릴
	수 있다.

*/
