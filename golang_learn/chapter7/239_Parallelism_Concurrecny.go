package chapter7

/*
		7.1.1 병렬성과 병행성


	물리적으로 별개의 흐름이란 동시에 각각의 흐름이 수행되는 경우를 의미한다. 두 사람이
	동시에 각각 업무를 보고 있다면 물리적으로 업무를 수행하는 것이다. 이것을 '병렬성'(Parallelism)
	이라고 한다.


	이와 반대로 '동시성' 혹은 병행성은(Concurrency)는 신문을 보는 와중에 잠시 중단하고 커피를 마시고 다시 신문을 보는
	것을 의미한다. 이는 물리적으로 동시에 수행되는 것은 아니지만 순차적으로 수행되는 것과는 큰 차이가 있다.

	신문 기사 10문단을 읽는 사이에 커피 10모금을 마신다고 할 때 2번째 커피 모금을 넘기는 것과 신문 기사의 다섯 번째
	문단을 읽는 것 중에서 어느 것을 먼저 해야하는지는 그다지 상관이 없는 것이 된다. 그때그때 편한 대로 하면 되는 것이다.

	이때 동시성이 있는 두 루틴은 서로 의존 관계가 없다. 2번째 커피 모금을 마지시 않으면 5번째 문단을 읽을 수 없는 상황이
	아니라는 의미이다.

	동시성은 병렬성과는 다르지만 '동시성이 있어야 병렬성이 있다.' 서로 어느 것이 먼저 되어야 하는 의존 관계가 있는 것은 함께
	진행될 수 없다. 둘 중 하나에 동시성이 없다면 병렬성이 생기지 않는 것이다. 양말과 구두를 같이 신을 수는 없듯이, 순서가 있는
	것은 적용할 수 없다.


	go 키워드는 유닉스 셀에서 &를 명령의 마지막에 붙이는 것과 유사하다. 이것을 붙이게 되면 프로세스가 백그라운드에서 생성되고 현재
	흐름과는 연관이 없어진다. 마찬가지로 go 키워드가 붙여 있는 함수 호출은 이제 별개의 흐름이 되는 것이다.



	함수 호출 부분에 함수 리터럴을 이용할 수 있으니 다음과 같이 써보겠다. 아래의 코드에서 In goroutine과 In main routine 중에서
	어느 것이 먼저 출력될지 알 수 없다.



	func main() {
	go func() {
		fmt.Println("In goroutine")
	}()

	fmt.Println("In main routine")
}


	심지어 메인 함수가 끝나버리면 고루틴이 모두 수행되지 않을 수 있다. 따라서 저 위의 코드만 main 함수에 넣고 수행해보면 In goroutine은
	수행조차 되지 않을 수 있다.




*/
