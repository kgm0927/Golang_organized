package chapter3

import "fmt"

func Example_slicing() {
	num := []int{1, 2, 3, 4, 5}
	fmt.Println(num)
	fmt.Println(num[1:3])
	fmt.Println(num[2:])
	fmt.Println(num[:3])
	// Output:
	// .
}

/*

3.2.2 슬라이스

배열도 쓸모가 있지만 자주 쓰이지 않는데, 더 유연한 구조인 슬라이스가 있기 때문이다.
사실 [3]string이 아닌 []string을 써도 프로그램은 잘 동작한다. '그게 바로 슬라이스'이다.


배열은 크기가 자료형에 고정되어 있다. 즉, [3]string 자료형은 3개의 문자열로 구성된 배열 자료형이다.
슬라이스는 길이와 용량을 가지고 있고 길이가 변할 수 있는 구조이다.

var fruits []string

기본적으로 빈 슬라이스에는 nil 값이 들어간다. n 개의 값이 들어있는 슬라이스를 만들려면 어떻게 하면 될까? 빈 스트링을
n 개 갖고 있는 슬라이스를 만들고 싶으면 다음과 같이 하면 된다.

fruits:=make([]string,n)

위와 같은 방법으로 슬라이스에 몇 개가 들어갈 지 알고 있는 경우는 매우 편리하다.
이런 방식으로 문자열에 접근할 수 있다.

fruits:=make([]string,3)
fruits[0]="사과"
fruits[1]="바나나"
fruits[2]="토마토"

슬라이스에서 범위가 넘어가는 경우 패닉이 발생한다. 패닉은 다른 언어들의 예외(exception)와
비슷하지만 적극적으로 활용하지 않는다. 에러를 반환할 수 있는 경우는 패닉을 활용하지 않고
에러를 반환하는 방식을 이용한다.



*/
