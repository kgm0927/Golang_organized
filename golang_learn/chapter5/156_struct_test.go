package chapter5

import "time"

/*

	이 장에서는 구조체 및 인터페이스에 대하여 자세히 알아볼 것이다.

	구조체는 필드들을 묶어놓은 것으로 다른 언어들의 구조체, 클래스, 레코드 등과 비슷한 역할을 한다.
	구조체를 이용하면 더 복잡한 자료형을 정의할 수 있다. 자료 네트워크를 통해 전송하거나 파일에 저장하고
	불러오는 경우에는 직렬화, 역직렬화 기법을 활용해야 한다.


	인터페이스는 메서드의 집합이다. 구현의 없고 메서드의 형태만 있다. 인터페이스의 메서드를 모두 구현하기만
	하면 해당 인터페이스를 구현하는 것으로 취급이 된다. 이것은 프로그램을 매우 유연하게 해준다. 인터페이스를
	이용하여 정렬 및 힙을 활용하는 방법을 알아보고, 외부 의존성을 줄이는 방법도 알아본다. '빈 인터페이스'는
	어떤 자료형도 받을 수 있는 '와일드카드'와 같은 존재로 어떤 자료형인지에 따라 다른 코드를 수행하는 형 스위치 등을
	이용하여 많이 활용이 된다.


		5.1 구조체



	필드들의 모음 혹은 묶음을 '구조체'라고 한다. 명명된 구성 요소들을 '필드'라고 한다. 배열이 서로 같은
	자료형의 자료들을 묶어놓은 것이라면 구조체는 서로 다른 자료형의 자료들도 묶을 수 있다.
*/

var task = struct {
	title string
	done  bool
	due   *time.Time
}{"laundry", false, nil}

/*
	할 일 목록 프로그램을 만들기 위해서 위와 같이 task 변수 하나를 만들었다. 제목, 완료 여부,
	기한 필드가 있다. 기한은 없을 수 도 없으니 포인터를 사용했다.
	기한이 없으면 nil 값을 줄 수 있다.



	자료형은 struct{...} 부분이다. 자료형만 떼어내서 이름을 붙여준다.


	var task = struct {
	title string
	done  bool
	due   *time.Time
	}

	이제 새로운 Task 변수는 이렇게 선언이 가능하다.

	var myTask Task


	이거는 값까지 담아서 정의한다.

	var myTask=Task{"laundry",false,nil}


	원하는 필드만 값을 넣을 수 있다. 넣지 않은 필드들은 기본값으로 설정이 된다. 기본값은 정수 0, bool은 false,
	문자열은 빈 문자열이다.


	혹은 구조체의 값을 설정할 때, 여러 줄로 나누고 싶은 경우가 있을 것이다. 다음과 같이 하는 것이 가장 좋다.


	var myTask=Task{
		title:"laundry",
		done: true,
	}


	유의해야 할 점이 done: true 다음에 쉼표가 붙어 있다는 것이다. 1장에서 잠시 알아보았는데 여기에 쉼표가 붙어
	있지 않으면 줄이 끝나는 것처럼 보이기 때문에 세미콜론이 붙은 것으로 인식되어서 구문 오류가 발생하게 된다.

	물론 다음과 같이 하여도 좋지만 위와 같이 마지막 필드에도 쉼표를 붙여주는 것이 읽기 쉽고, 한 줄을 추가하거나
	삭제할 때도 편리하다고 생각한다.


	var myTask=Task{
		title,"laundry",
		done:true}
*/
